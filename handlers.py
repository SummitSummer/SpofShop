import logging
from aiogram import types
from aiogram.fsm.context import FSMContext
from config import SUBSCRIPTION_PLANS, ADMIN_ID
from states import OrderState
from keyboards import (
    get_main_menu_keyboard, get_subscription_keyboard, get_payment_keyboard,
    get_back_to_start_keyboard, get_back_to_menu_keyboard
)
from models import User, Order, SubscriptionPlan, db
from app import app
from digiseller import generate_payment_url
from datetime import datetime

logger = logging.getLogger(__name__)

def get_or_create_user(telegram_user):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    with app.app_context():
        user = User.query.filter_by(id=telegram_user.id).first()
        if not user:
            user = User(
                id=telegram_user.id,
                username=telegram_user.username,
                first_name=telegram_user.first_name,
                last_name=telegram_user.last_name,
                language_code=telegram_user.language_code
            )
            db.session.add(user)
            db.session.commit()
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.username = telegram_user.username
            user.first_name = telegram_user.first_name
            user.last_name = telegram_user.last_name
            user.last_activity = datetime.utcnow()
            db.session.commit()
        return user

async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = get_or_create_user(message.from_user)
    
    welcome_text = (
        "üéµ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Spotify Family Bot!** üéµ\n\n"
        "üî• –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ **Spotify Premium** –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º!\n\n"
        "‚úÖ **–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:**\n"
        "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –º—É–∑—ã–∫–∞ –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã\n"
        "‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞\n"
        "‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –æ—Ñ–ª–∞–π–Ω –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º Spotify Premium\n\n"
        "üíö **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**"
    )
    
    keyboard = get_main_menu_keyboard()
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        from aiogram.types import FSInputFile
        photo = FSInputFile("spotify_image.png")
        await message.answer_photo(
            photo=photo,
            caption=welcome_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é: {e}")
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await message.answer(welcome_text, reply_markup=keyboard, parse_mode="Markdown")

async def handle_order_subscription(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    user = get_or_create_user(callback_query.from_user)
    
    subscription_text = (
        "üéµ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ Spotify Premium:**\n\n"
        "üíö **–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:**\n"
        "üî∏ **1 –º–µ—Å—è—Ü** ‚Äî 150‚ÇΩ\n"
        "üî∏ **3 –º–µ—Å—è—Ü–∞** ‚Äî 370‚ÇΩ *(—ç–∫–æ–Ω–æ–º–∏—è 80‚ÇΩ)*\n"
        "üî∏ **6 –º–µ—Å—è—Ü–µ–≤** ‚Äî 690‚ÇΩ *(—ç–∫–æ–Ω–æ–º–∏—è 210‚ÇΩ)*\n"
        "üî∏ **12 –º–µ—Å—è—Ü–µ–≤** ‚Äî 1300‚ÇΩ *(—ç–∫–æ–Ω–æ–º–∏—è 500‚ÇΩ)*\n\n"
        "‚ú® **–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ –≤ Premium:**\n"
        "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –º—É–∑—ã–∫–∞ –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã\n"
        "‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞ (–¥–æ 320 kbps)\n"
        "‚Ä¢ –û—Ñ–ª–∞–π–Ω –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ\n"
        "‚Ä¢ –ü—Ä–æ–ø—É—Å–∫ —Ç—Ä–µ–∫–æ–≤ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ Spotify Connect\n\n"
        "üíö –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω:"
    )
    
    keyboard = get_subscription_keyboard()
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
    if callback_query.message:
        await callback_query.message.delete()
        await callback_query.bot.send_message(
            chat_id=callback_query.message.chat.id,
            text=subscription_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    await state.set_state(OrderState.choosing_subscription)
    await callback_query.answer()

async def handle_support(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ Support"""
    support_text = (
        "üí¨ **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**\n\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —ç—Ç–æ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É:\n\n"
        "üë§ https://t.me/chanceofrain"
    )
    
    keyboard = get_back_to_menu_keyboard()
    
    if callback_query.message:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
        await callback_query.message.delete()
        await callback_query.bot.send_message(
            chat_id=callback_query.message.chat.id,
            text=support_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    await callback_query.answer()

async def handle_faq(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ FAQ"""
    faq_text = (
        "üìñ **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã**\n\n"
        "1Ô∏è‚É£ **–≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞?**\n"
        "‚Äî –î–∞, —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ Spotify Premium —á–µ—Ä–µ–∑ —Å–µ–º–µ–π–Ω—ã–π –ø–ª–∞–Ω.\n\n"
        "2Ô∏è‚É£ **–ù—É–∂–Ω–æ –ª–∏ —á—Ç–æ-—Ç–æ –ø–ª–∞—Ç–∏—Ç—å –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü?**\n"
        "‚Äî –ù–µ—Ç. –í—ã –ø–ª–∞—Ç–∏—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ä–æ–∫ (1 / 3 / 6 / 12 –º–µ—Å—è—Ü–µ–≤).\n\n"
        "3Ô∏è‚É£ **–ß—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è?**\n"
        "‚Äî –õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç Spotify –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n"
        "4Ô∏è‚É£ **–ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–µ–º—å—é?**\n"
        "‚Äî –ú—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Å–µ–º—å—é Spotify, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∞–¥—Ä–µ—Å.\n\n"
        "5Ô∏è‚É£ **–≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ?**\n"
        "‚Äî –î–∞. –î–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–µ–º—å—é –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\n\n"
        "6Ô∏è‚É£ **–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ?**\n"
        "‚Äî –û—Ç 5 –¥–æ 30 –º–∏–Ω—É—Ç. –ò–Ω–æ–≥–¥–∞ –¥–æ 2 —á–∞—Å–æ–≤.\n\n"
        "7Ô∏è‚É£ **–ß—Ç–æ –µ—Å–ª–∏ –º–µ–Ω—è —É–¥–∞–ª—è—Ç –∏–∑ —Å–µ–º—å–∏?**\n"
        "‚Äî –ú—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –≤–∞—Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –µ—Å–ª–∏ —Å—Ä–æ–∫ –µ—â—ë –Ω–µ –∏—Å—Ç—ë–∫.\n\n"
        "8Ô∏è‚É£ **–ú–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?**\n"
        "‚Äî –î–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ —á–µ—Ä–µ–∑ –±–æ—Ç–∞."
    )
    
    keyboard = get_back_to_menu_keyboard()
    
    if callback_query.message:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
        await callback_query.message.delete()
        await callback_query.bot.send_message(
            chat_id=callback_query.message.chat.id,
            text=faq_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    await callback_query.answer()

async def handle_back_to_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    
    welcome_text = (
        "üéµ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Spotify Family Bot!** üéµ\n\n"
        "üî• –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ **Spotify Premium** –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º!\n\n"
        "‚úÖ **–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:**\n"
        "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –º—É–∑—ã–∫–∞ –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã\n"
        "‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞\n"
        "‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –æ—Ñ–ª–∞–π–Ω –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º Spotify Premium\n\n"
        "üíö **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**"
    )
    
    keyboard = get_main_menu_keyboard()
    
    if callback_query.message:
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        await callback_query.message.delete()
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            from aiogram.types import FSInputFile
            photo = FSInputFile("spotify_image.png")
            await callback_query.bot.send_photo(
                chat_id=callback_query.message.chat.id,
                photo=photo,
                caption=welcome_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é: {e}")
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await callback_query.bot.send_message(
                chat_id=callback_query.message.chat.id,
                text=welcome_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
    
    await callback_query.answer()

async def process_plan_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    plan_id = callback_query.data.replace("select_plan_", "") if callback_query.data else ""
    
    with app.app_context():
        plan = SubscriptionPlan.query.filter_by(id=plan_id).first()
        if not plan:
            await callback_query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        order_count = Order.query.count() + 1
        order_id = f"ORDER_{order_count:05d}"
        
        order = Order(
            id=order_id,
            user_id=callback_query.from_user.id,
            plan_id=plan_id,
            total_amount=plan.price,
            status='created'
        )
        db.session.add(order)
        db.session.commit()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(order_id=order_id, selected_plan=plan_id)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–æ–≥–∏–Ω –æ—Ç Spotify —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    text = (
        f"‚úÖ **–í—ã–±—Ä–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞:** {plan.name} ‚Äî {plan.price}‚ÇΩ\n\n"
        "üìß **–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Spotify:**\n\n"
        "‚ö†Ô∏è **–í–ê–ñ–ù–û:**\n"
        "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: **–ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å**\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π ‚Äî **–æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ—á–Ω—ã–º–∏**\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **—Ç–æ—á–Ω–æ —Ç–∞–∫–æ–π –∂–µ** –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å, –∫–∞–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Spotify\n\n"
        "üìù **–ü—Ä–∏–º–µ—Ä:**\n"
        "‚Ä¢ your_email@gmail.com:yourpassword123\n"
        "‚Ä¢ spotify_username:yourpassword\n\n"
        "üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** –î–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–µ–º—å—é –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º"
    )
    
    keyboard = get_back_to_menu_keyboard()
    
    if callback_query.message:
        await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    
    await state.set_state(OrderState.entering_spotify_login)
    await callback_query.answer()

async def process_spotify_login(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞ Spotify"""
    if not message.text:
        return
    
    spotify_login = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å
    if ":" not in spotify_login:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å\n\n–ü—Ä–∏–º–µ—Ä: myemail@gmail.com:mypassword123",
            reply_markup=get_back_to_start_keyboard()
        )
        return
    
    login_parts = spotify_login.split(":", 1)
    if len(login_parts) != 2 or len(login_parts[0]) < 3 or len(login_parts[1]) < 3:
        await message.answer(
            "‚ùå –õ–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å",
            reply_markup=get_back_to_start_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    order_id = state_data.get("order_id")
    
    with app.app_context():
        order = Order.query.filter_by(id=order_id).first()
        if not order:
            await message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å –¥–∞–Ω–Ω—ã–º–∏ Spotify
        order.spotify_login = login_parts[0]
        order.spotify_password = login_parts[1]  # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —Å–ª–µ–¥—É–µ—Ç —à–∏—Ñ—Ä–æ–≤–∞—Ç—å
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Digiseller
        try:
            payment_url = generate_payment_url(order)
            order.payment_url = payment_url
            order.status = 'awaiting_payment'
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É: {e}")
            payment_url = f"https://payment-gateway.example.com/pay?order_id={order_id}&amount={order.total_amount}"
            order.payment_url = payment_url
        
        db.session.commit()
        
        plan = order.subscription_plan
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–ª–∞—Ç–æ–π
    payment_text = (
        f"üí≥ **–ö –æ–ø–ª–∞—Ç–µ:** {plan.price}‚ÇΩ\n\n"
        f"üìã **–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:**\n"
        f"‚Ä¢ **–ü–æ–¥–ø–∏—Å–∫–∞:** {plan.name}\n"
        f"‚Ä¢ **Spotify –∞–∫–∫–∞—É–Ω—Ç:** {login_parts[0]}\n\n"
        "üî• **–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:**\n"
        "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å'**\n"
        "2Ô∏è‚É£ –°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–ª–∞—Ç–µ–∂\n"
        "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ **'‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª'**\n\n"
        "‚ö°Ô∏è –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ Spotify Premium –≤ —Ç–µ—á–µ–Ω–∏–µ 5-30 –º–∏–Ω—É—Ç!"
    )
    
    keyboard = get_payment_keyboard(payment_url)
    
    await message.answer(payment_text, reply_markup=keyboard, parse_mode="Markdown")
    await state.set_state(OrderState.payment_processing)

async def process_payment_completed(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"""
    state_data = await state.get_data()
    order_id = state_data.get("order_id")
    
    with app.app_context():
        order = Order.query.filter_by(id=order_id).first()
        if not order:
            await callback_query.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        order.status = 'paid'
        db.session.commit()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success_text = (
        "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
        "üìû –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø–ª–∞—Ç–µ–∂ –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.\n"
        "–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤."
    )
    
    if callback_query.message:
        await callback_query.message.edit_text(success_text, reply_markup=get_back_to_start_keyboard())
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        admin_msg = (
            f"üîî **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!**\n\n"
            f"**–ó–∞–∫–∞–∑:** {order_id}\n"
            f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** @{callback_query.from_user.username or '–±–µ–∑ username'}\n"
            f"**–ò–º—è:** {callback_query.from_user.first_name}\n"
            f"**ID:** {callback_query.from_user.id}\n"
            f"**–ü–ª–∞–Ω:** {order.subscription_plan.name}\n"
            f"**–°—É–º–º–∞:** {order.total_amount}‚ÇΩ\n"
            f"**Spotify –ª–æ–≥–∏–Ω:** {order.spotify_login}\n\n"
            f"üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:** {order.payment_url}"
        )
        
        await callback_query.bot.send_message(ADMIN_ID, admin_msg, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
    
    await state.clear()
    await callback_query.answer()

async def process_start_over(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ'"""
    await state.clear()
    await cmd_start(callback_query.message, state)
    await callback_query.answer()

async def handle_unknown_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    unknown_text = (
        "‚ùì –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."
    )
    
    keyboard = get_back_to_start_keyboard()
    await message.answer(unknown_text, reply_markup=keyboard)

async def cmd_admin_orders(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id != ADMIN_ID:
        return
    
    with app.app_context():
        orders = Order.query.order_by(Order.created_at.desc()).limit(10).all()
        
        if not orders:
            await message.answer("üìã –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
            return
        
        orders_text = "üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–∫–∞–∑–æ–≤:**\n\n"
        
        for order in orders:
            orders_text += (
                f"**{order.id}**\n"
                f"‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order.user.first_name} (@{order.user.username or '–±–µ–∑ username'})\n"
                f"‚îú –ü–ª–∞–Ω: {order.subscription_plan.name}\n"
                f"‚îú –°—É–º–º–∞: {order.total_amount}‚ÇΩ\n"
                f"‚îú –°—Ç–∞—Ç—É—Å: {order.status.value}\n"
                f"‚îî –°–æ–∑–¥–∞–Ω: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            )
        
        await message.answer(orders_text, parse_mode="Markdown")

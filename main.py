# ‚ö†Ô∏è –≠—Ç–æ—Ç –±–æ—Ç —Ç—Ä–µ–±—É–µ—Ç SSL-–º–æ–¥—É–ª—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è —Ä–∞–±–æ—Ç—ã aiogram.
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ –µ–≥–æ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏, –≥–¥–µ –º–æ–¥—É–ª—å `ssl` –¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ —á–µ—Ä–µ–∑ Render).

try:
    import ssl
except ModuleNotFoundError:
    print("\n‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–æ–¥—É–ª—å `ssl`, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è HTTPS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.")
    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤ –¥—Ä—É–≥–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä Render.com, –ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –≤ Docker —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π OpenSSL.")
    exit(1)

import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

API_TOKEN = '8361282581:AAHALZB4M1vuPU5-BTyJSzarG2Z7YASa9J4'
ADMIN_ID = 2137078270

logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–æ–¥–ø–∏—Å–æ–∫
kb_subscriptions = ReplyKeyboardMarkup(resize_keyboard=True)
kb_subscriptions.add(
    KeyboardButton('1 –º–µ—Å—è—Ü - 150‚ÇΩ'),
    KeyboardButton('3 –º–µ—Å—è—Ü–∞ - 370‚ÇΩ')
)
kb_subscriptions.add(
    KeyboardButton('6 –º–µ—Å—è—Ü–µ–≤ - 690‚ÇΩ'),
    KeyboardButton('12 –º–µ—Å—è—Ü–µ–≤ - 1300‚ÇΩ')
)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–í—ã–±–µ—Ä–∏ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Spotify Family:",
        reply_markup=kb_subscriptions
    )

@dp.message_handler(lambda message: message.text.startswith(('1 –º–µ—Å—è—Ü', '3 –º–µ—Å—è—Ü–∞', '6 –º–µ—Å—è—Ü–µ–≤', '12 –º–µ—Å—è—Ü–µ–≤')))
async def handle_subscription_choice(message: types.Message):
    user_data[message.from_user.id] = {
        'subscription': message.text
    }
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–æ—á—Ç—É –æ—Ç Spotify, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–µ–º—å—é:")

@dp.message_handler(lambda message: message.from_user.id in user_data and 'login' not in user_data[message.from_user.id])
async def handle_spotify_login(message: types.Message):
    user_data[message.from_user.id]['login'] = message.text

    subscription = user_data[message.from_user.id]['subscription']
    login = user_data[message.from_user.id]['login']
    tg_username = message.from_user.username or '–±–µ–∑ –Ω–∏–∫–∞'

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! üéß\n"
        "–í–æ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: https://t.me/yourpayment\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –º—ã –¥–æ–±–∞–≤–∏–º –≤–∞—Å –≤ —Å–µ–º—å—é –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç."
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    text = (
        f"\ud83d\udd14 –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞: {subscription}\n"
        f"Spotify –ª–æ–≥–∏–Ω: {login}\n"
        f"Telegram: @{tg_username}"
    )
    await bot.send_message(ADMIN_ID, text)

    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    del user_data[message.from_user.id]

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

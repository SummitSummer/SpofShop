"""
Telegram bot handlers for Spotify subscription bot
Simplified version without payment system
"""
import logging
from datetime import datetime
from aiogram import types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from app import app, db
from models import User, Order, SubscriptionPlan, OrderStatus

logger = logging.getLogger(__name__)

# FSM States
class OrderState(StatesGroup):
    choosing_plan = State()
    awaiting_contact = State()
    
# Keyboards
def get_main_keyboard():
    """Main menu keyboard"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéµ –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="order_subscription")],
        [InlineKeyboardButton(text="‚ùì FAQ", callback_data="faq")],
        [InlineKeyboardButton(text="üë§ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
    ])
    return keyboard

def get_subscription_plans_keyboard():
    """Subscription plans selection keyboard"""
    buttons = []
    with app.app_context():
        plans = SubscriptionPlan.query.filter_by(is_active=True).all()
        for plan in plans:
            text = f"{plan.name} - {plan.price}‚ÇΩ"
            buttons.append([InlineKeyboardButton(text=text, callback_data=f"plan_{plan.id}")])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_back_keyboard():
    """Back to main menu keyboard"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

# Helper functions
def create_or_update_user(telegram_user):
    """Create or update user in database"""
    with app.app_context():
        user = User.query.filter_by(id=telegram_user.id).first()
        if not user:
            user = User()
            user.id = telegram_user.id
            user.username = telegram_user.username
            user.first_name = telegram_user.first_name
            user.last_name = telegram_user.last_name
            user.language_code = telegram_user.language_code or 'ru'
            db.session.add(user)
        else:
            user.username = telegram_user.username
            user.first_name = telegram_user.first_name
            user.last_name = telegram_user.last_name
            user.last_activity = datetime.utcnow()
        
        db.session.commit()
        return user

# Handlers
async def cmd_start(message: types.Message, state: FSMContext):
    """Start command handler"""
    try:
        user = create_or_update_user(message.from_user)
        await state.clear()
        
        welcome_text = (
            "üéµ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Spotify Family Bot!</b> üéµ\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ Spotify Premium –ø–æ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ!\n\n"
            "üíé <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>\n"
            "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∏\n"
            "‚Ä¢ –ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã\n"
            "‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞\n"
            "‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –º—É–∑—ã–∫–∏ –æ—Ñ–ª–∞–π–Ω\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º Spotify Premium\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
        
        await message.answer(welcome_text, reply_markup=get_main_keyboard(), parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error in cmd_start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_order_subscription(callback: types.CallbackQuery, state: FSMContext):
    """Handle subscription order"""
    try:
        await callback.answer()
        
        text = (
            "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
            "üí° <i>–ß–µ–º –¥–æ–ª—å—à–µ –ø–µ—Ä–∏–æ–¥, —Ç–µ–º –≤—ã–≥–æ–¥–Ω–µ–µ —Ü–µ–Ω–∞!</i>"
        )
        
        await callback.message.edit_text(
            text, 
            reply_markup=get_subscription_plans_keyboard(),
            parse_mode="HTML"
        )
        await state.set_state(OrderState.choosing_plan)
        
    except Exception as e:
        logger.error(f"Error in handle_order_subscription: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def handle_plan_selection(callback: types.CallbackQuery, state: FSMContext):
    """Handle subscription plan selection"""
    try:
        await callback.answer()
        
        plan_id = callback.data.replace("plan_", "")
        
        with app.app_context():
            plan = SubscriptionPlan.query.filter_by(id=plan_id).first()
            if not plan:
                await callback.answer("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
                
            # Create order
            order_count = Order.query.count() + 1
            order_id = f"ORDER_{order_count:05d}"
            
            order = Order()
            order.id = order_id
            order.user_id = callback.from_user.id
            order.plan_id = plan.id
            order.total_amount = plan.price
            order.status = OrderStatus.CREATED
            order.created_at = datetime.utcnow()
            
            db.session.add(order)
            db.session.commit()
            
            text = (
                f"‚úÖ <b>–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                f"üÜî <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> <code>{order_id}</code>\n"
                f"üì¶ <b>–ü–ª–∞–Ω:</b> {plan.name}\n"
                f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {plan.price}‚ÇΩ\n\n"
                f"üìû <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:</b>\n"
                f"1. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π @chanceofrain\n"
                f"2. –°–æ–æ–±—â–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <code>{order_id}</code>\n"
                f"3. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à –∑–∞–∫–∞–∑\n\n"
                f"<i>üí° –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –ø–ª–∞—Ç–µ–∂–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã</i>"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url="https://t.me/chanceofrain")],
                [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            await state.clear()
            
    except Exception as e:
        logger.error(f"Error in handle_plan_selection: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)

async def handle_faq(callback: types.CallbackQuery):
    """Handle FAQ"""
    try:
        await callback.answer()
        
        faq_text = (
            "‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>\n\n"
            "<b>Q: –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Spotify Family?</b>\n"
            "A: –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–µ–º–µ–π–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ —Å–æ –≤—Å–µ–º–∏ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è–º–∏.\n\n"
            "<b>Q: –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ª–∏ —ç—Ç–æ?</b>\n"
            "A: –î–∞, –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏ –Ω–µ –Ω–∞—Ä—É—à–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ Spotify.\n\n"
            "<b>Q: –ö–∞–∫ –¥–æ–ª–≥–æ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞?</b>\n"
            "A: –°–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≤–∞–º–∏ –ø–ª–∞–Ω—É (1, 3, 6 –∏–ª–∏ 12 –º–µ—Å—è—Ü–µ–≤).\n\n"
            "<b>Q: –ß—Ç–æ –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã?</b>\n"
            "A: –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @chanceofrain - –º—ã —Ä–µ—à–∏–º –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
            "<b>Q: –ú–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?</b>\n"
            "A: –î–∞, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º –∑–∞ –º–µ—Å—è—Ü –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è."
        )
        
        await callback.message.edit_text(faq_text, reply_markup=get_back_keyboard(), parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error in handle_faq: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def handle_support(callback: types.CallbackQuery):
    """Handle support contact"""
    try:
        await callback.answer()
        
        support_text = (
            "üë§ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
            "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n"
            "üë®‚Äçüíª @chanceofrain\n\n"
            "üìû <b>–ú—ã –ø–æ–º–æ–∂–µ–º —Å:</b>\n"
            "‚Ä¢ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n"
            "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n"
            "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–ø–∏—Å–∫–æ–π\n"
            "‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤\n\n"
            "‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b> –æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/chanceofrain")],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        
        await callback.message.edit_text(support_text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error in handle_support: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def handle_back_to_menu(callback: types.CallbackQuery, state: FSMContext):
    """Return to main menu"""
    try:
        await callback.answer()
        await state.clear()
        
        welcome_text = (
            "üéµ <b>Spotify Family Bot</b> üéµ\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:"
        )
        
        await callback.message.edit_text(welcome_text, reply_markup=get_main_keyboard(), parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error in handle_back_to_menu: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

def register_handlers(dp):
    """Register all bot handlers"""
    # Commands
    dp.message.register(cmd_start, Command("start"))
    
    # Callbacks
    dp.callback_query.register(handle_order_subscription, F.data == "order_subscription")
    dp.callback_query.register(handle_plan_selection, F.data.startswith("plan_"))
    dp.callback_query.register(handle_faq, F.data == "faq")
    dp.callback_query.register(handle_support, F.data == "support")
    dp.callback_query.register(handle_back_to_menu, F.data == "back_to_menu")
    
    logger.info("Bot handlers registered successfully")